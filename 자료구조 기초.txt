# 1. 탐색 : 많은 양의 데이터 중 원하는 데이터를 찾는 과정 

# 2. 자료구조 : 데이터를 표현하고 관리하고 처리하기 위한 구조 

# stack 

stack = []

stack.append(5)
stack.append(2)
stack.append(3)
stack.append(7)
stack.pop()
stack.append(1)
stack.append(4)
stack.pop()

print(stack) # 최하단 원소부터 출력 
print(stack[::-1]) # 최상단 원소부터 출력 

# queue 

from collections import deque 

queue = deque()

queue.append(5)
queue.append(2)
queue.append(3)
queue.append(7)
queue.popleft() 
queue.append(1)
queue.append(4)
queue.popleft()

print(queue) # 먼저 들어온 순서대로 출력 
queue.reverse() # 다음 출력을 위해 역순으로 바꾸기 
print(queue) # 나중에 들어온 원소부터 출력 

# 재귀함수 

def recursive_function():
	print('재귀 함수를 호출합니다')
	recursive_function()
recursive_function()

# 재귀의 최대 깊이 초과 오류 

#재귀 함수 종료 예제 
def recursive_function(i):
	#100번째 출력했을 때 종료되도록 종료 조건 명시 
	if i == 100:
		return 
	print(i, '번째 재귀함수에서' , i + 1, ' 번째 재귀 함수를 호출합니다.')
	recursive_function(i + 1) 
	print(i, '번째 재귀 함수를 종료합니다 .') 

recursive_function(1) 

#팩토리얼 
# 반복적으로 구현한 n! 
def factorial_iterative(n):
	result = 1 
	# 1부터 n까지의 수를 차례대로 곱하기 
	for i in range(1, n+1):
		result *= i 
	return result 

#재귀적으로 구현한 n! 
def factorial_recursive(n):
	if n<=1:
		return 1 
	return n*factorial_recursive(n-1)
